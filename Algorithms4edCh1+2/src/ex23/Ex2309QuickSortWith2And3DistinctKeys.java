package ex23;


public class Ex2309QuickSortWith2And3DistinctKeys {

  /* p303  
  2.3.9  Explain what happens when Quick.sort() is run on an array having 
  items with just two distinct keys, and then explain what happens when it 
  is run on an array having just three distinct keys.
  
  Compared to (quick) sorting an array of the same length with one distinct key, 
  with two distinct keys at least one compare returns true assuming the length of 
  the array is greater than one and both keys are in the array, because one of the 
  keys will be less than the other. This increases the number of compares and tends 
  to decrease the number of exchanges so the total number of compares and exchanges 
  decreases as well as the number of partitions and subarrays of lengths zero and 
  two while the number of subarrays of length one tends to increase.  The number of
  subarrays of lengths zero and two remains balanced.
  
  When (quick) sorting an array with three distinct keys, compared to two distinct 
  keys, the number of compares increases, sometimes by close to a factor of two. 
  Unless one key preponderates (frequency > .5) and except for the edge case of an
  an array of length 3 with distinct keys, the number of exchanges tends to decrease 
  and in any case the total number of compares and exchanges remains at least the 
  same and tends to increase, the number of partitions tends to decrease and the 
  number of subarrays of lengths zero and two remains balanced but tends to decrease 
  as does the number of subarrays of length one.
  
  This assesment is based on inspection of the code of algorithm 2.5 and review of the 
  following data generated by sort.Quicks.quickIntCEP(), sort.Quicks.quickIntSub012() 
  and sort.Quicks.printPermutationsStats():
  
                                          over all unique permutations of a[]
                             -----------------------------------------------------------
                                                                 mean
                       a[]   meanCompares  meanExchanges  compares+Exchanges  partitions
                   [1,1,1]          4.000          2.000          6.000          2.000
                   [1,2,1]          4.333          1.667          6.000          2.667
                   [1,2,3]          6.000          1.833          7.833          3.333
                 [1,1,1,1]          6.000          3.000          9.000          4.000
                 [1,2,1,2]          7.333          2.833         10.167          4.333
                 [1,2,3,1]          7.917          2.667         10.583          4.167
             [1,1,1,1,1,1]         12.000          6.000         18.000          6.000
             [2,1,1,1,1,1]         13.833          5.833         19.667          6.667
             [2,2,1,1,1,1]         13.867          5.467         19.333          6.933
             [2,2,2,1,1,1]         13.900          5.300         19.200          6.000
             [1,2,3,1,1,1]         14.800          5.400         20.200          7.133
             [1,1,2,2,3,3]         14.444          4.911         19.356          6.756
 [1,1,1,1,1,1,1,1,1,1,1,1]         34.000         17.000         51.000         14.000
 [2,2,1,1,1,1,1,1,1,1,1,1]         36.818         15.939         52.758         14.545
 [2,2,2,1,1,1,1,1,1,1,1,1]         36.982         15.373         52.355         13.909
 [2,2,2,2,2,2,1,1,1,1,1,1]         36.779         14.652         51.431         12.944
 [1,2,3,1,1,1,1,1,1,1,1,1]         37.985         15.939         53.924         14.848
 [1,1,2,2,3,3,1,1,1,1,1,1]         37.833         14.474         52.307         13.987
 [1,1,1,1,2,2,2,2,3,3,3,3]         39.366         13.800         53.166         14.264

  
  For the table below all arrays used had a length of 100K, were shuffled except for 
  those with only one distinct key and for each array the frequencies of all its keys 
  were the same or as close as possible (for three keys the frequencies were 33333/100K, 
  33333/100K and 33334/100K).
                                                                    sub-arrays
                                   compares                ----------------------------
             compares  exchanges  +exchanges   partitions  length_0  length_1  length_2
             --------  ---------  ----------   ----------  --------  --------  --------
  1 key      1561130   780565     2,341,695    131070      31071     34465     31071
  2 keys     1565573   747813     2,313,386    109984      11333     44334     11332
  3 keys     2894683   697349     3,592,032    101700      15847     42077     15846
  100K keys  2202393   390867     2,593,260    133288      33427     33287     16598
  
  */ 
  
  public static void main(String[] args) {
    

  }
                      
}

