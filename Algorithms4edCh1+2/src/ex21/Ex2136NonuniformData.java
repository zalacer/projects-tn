package ex21;

import static v.ArrayUtils.*;

import java.util.function.Consumer;

import analysis.Timer;
import edu.princeton.cs.algs4.StdRandom;

/* p269
  2.1.36 Nonuniform data. Write a client that generates test data that is not uniform,
  including the following:
  *  Half the data is 0s, half 1s.
  *  Half the data is 0s, half the remainder is 1s, half the remainder is 2s, and so forth.
  *  Half the data is 0s, half random  int values.
  Develop and test hypotheses about the effect of such input on the performance of the
  algorithms in this section.
  
  I assumed that in all cases the data is to be randomized and you did not mean for example
  that the first half should be 0s and the second half should be 1s in the first case, because
  that wasn't stated.
  
  Shellsort can sort the first nonuniform type faster than the 2nd faster than the 3rd,
  at least when the latter has half its data consisting of only 25 distinct values, and
  it can sort all of them way faster than uniform data but not as fast as poisson or
  discrete distributions, at least when the latter has only 5 distinct values. 
 */

public class Ex2136NonuniformData {
  
  public static void sortNonuniformDoublingTest(
      String alg, int n, int trials, int nonUniformType, double...params) {
    // do doubling test of sort for alg with inital array of dist with length n
    double previous = 0; 
    if (params == null || params.length == 0) {
      previous = sortNonuniformTimeTrial(alg, n/2, trials, nonUniformType);
    } else {
      previous = sortNonuniformTimeTrial(alg, n/2, trials, nonUniformType, params);
    }
    double time; double ratio; 
    System.out.println("  Doubling test of "+alg+"sort with nonuniform type "
        +nonUniformType+" for "+trials+" trials");
    System.out.println("             N          time          ratio");
    for (int i = n; true; i = 2*i) {
      if (params == null || params.length == 0) {
        time = sortNonuniformTimeTrial(alg, i, trials, nonUniformType);
      } else {
        time = sortNonuniformTimeTrial(alg, i, trials, nonUniformType, params);
      }
      ratio = time/previous;
      System.out.printf("  %12d       %7.0f       %8.3f\n", i, time, ratio);
      previous = time;
    }
  }
  
  public static void sortDistVsNonuniformDoublingTest(
      String alg, int n, int trials, String dist, int nonUniformType,  double[]...params) {
    // do doubling tests of sort for alg with inital array length n comparing
    // performance for dist vs. nonUniformType data
    double previous1 = 0; double previous2 = 0;
    if (params == null || params.length == 0) {
      previous1 = sortDistTimeTrial(alg, n/2, trials, dist);
      previous2 = sortNonuniformTimeTrial(alg, n/2, trials, nonUniformType);
    } else {
      previous1 = sortDistTimeTrial(alg, n/2, trials, dist, params[0]);
      previous2 = sortNonuniformTimeTrial(alg, n/2, trials, nonUniformType, params[1]);
    }
    double time1; double time2; double ratio1; double ratio2;
    System.out.println(
        "  Doubling test for "+alg+"sort comparing "+dist+" vs. nonuniform type "+nonUniformType+" with "+trials+" trials");
    System.out.println("             N       time1       time2        ratio1        ratio2");
    for (int i = n; true; i = 2*i) {
      if (params == null || params.length == 0) {
        time1 = sortDistTimeTrial(alg, i, trials, dist);
      } else {
        time1 = sortDistTimeTrial(alg, i, trials, dist, params[0]);
      }
      ratio1 = time1/previous1;
      if (params == null || params.length == 0) {
        time2 = sortNonuniformTimeTrial(alg, i, trials, nonUniformType);
      } else {
        time2 = sortNonuniformTimeTrial(alg, i, trials, nonUniformType, params[1]);
      }
      ratio2 = time2/previous2;
      System.out.printf("  %12d     %7.0f     %7.0f     %8.3f      %8.3f\n", 
          i, time1, time2, ratio1, ratio2);
      previous1 = time1; previous2 = time2;
    }
  }
  
  public static double sortNonuniformTimeTrial(
      String alg, int n, int trials, int nonUniformType, double...params) {
    // return the average time for sorting a Double array of nonUniformType 
    // with length n by the sort algorithm alg over trials.
    // the nonUniformTypes are:
    // 1 - generated by getNonUniformArray1(int)
    // 2 - generated by getNonUniformArray2(int)
    // 3 - generated by getNonUniformArray3(int)
    Consumer<Double[]> con = null;
    switch (alg) {
    case "insertion": con = (Double[] g) -> sort.Insertion.sort(g); break;
    case "selection": con = (Double[] g) -> sort.Selection.sort(g); break;
    case "shell"    : con = (Double[] g) -> sort.Shell.sort(g)    ; break;
    case "default"  : 
      throw new IllegalArgumentException("sortDistTimeTrial: alg not recognized");
    }
    long[] times = new long[trials];
    Double[] a = null;
    Timer t = new Timer();
    for (int i = 0; i < trials; i++) {
      StdRandom.setSeed(System.currentTimeMillis());
      switch (nonUniformType) {
      case 1: a = getNonUniformArray1(n); break;
      case 2: a = getNonUniformArray2(n); break;
      case 3: 
        if (params != null && params.length > 1) {
          a = getNonUniformArray3(n, (int) params[0], (int) params[1]); break;
        } else throw new IllegalArgumentException(
            "sortDistTimeTrial: nonuniform type 3 specified but parameters not provided");
      default: 
        throw new IllegalArgumentException("sortDistTimeTrial: nonUniformType not recognized");
      }
      t.reset();
      con.accept(a);
      times[i] = t.num();
    }
    return mean(times);
  }
  
  public static Double[] getNonUniformArray1(int n) {
    // return a double array with half 0s and half 1s
    Double[] d = new Double[n];
    for (int i = 0; i < n/2; i++) d[i] = 0.;
    for (int i = n/2; i < n; i++) d[i] = 1.;
    return d;
  }
  
  public static Double[] getNonUniformArray2(int n) {
    // return a double array with half 0s, half the remainder 1s, 
    // half the remainder 2s, etc.
    Double[] d = new Double[n];
    int m = n; int sum = 0; double v = -0.;
    while(sum < n) {
      m = m % 2 == 0 ? m/2 : m/2+1;
      if (sum + m > n) m = n - sum;
      for (int i = sum; i < sum+m; i++) d[i] = v;
      sum += m; v++;
    }
    return d;
  }
  
  public static Double[] getNonUniformArray3(int n, int min, int max) {
    // return a double array with half the data is 0s, half random 
    // integer values from min to max all randomized
    Double[] d = new Double[n];
    for (int i = 0; i < n/2; i++) d[i] = 0.;
    StdRandom.setSeed(System.currentTimeMillis());
    for (int i = n/2; i < n; i++) d[i] = 1.*StdRandom.uniform(min, max);
    return d;
  }

  public static void sortDistDoublingTest(
      String alg, int n, int trials, String dist, double...params) {
    // do doubling test of sort for alg with inital array of dist with length n
    double previous = 0; 
    if (params == null || params.length == 0) {
      previous = sortDistTimeTrial(alg, n/2, trials, dist);
    } else {
      previous = sortDistTimeTrial(alg, n/2, trials, dist, params);
    }
    double time; double ratio; 
    System.out.println(
        "  Doubling test of "+alg+"sort with "+dist+" for "+trials+" trials");
    System.out.println("             N          time          ratio");
    for (int i = n; true; i = 2*i) {
      if (params == null || params.length == 0) {
        time = sortDistTimeTrial(alg, i, trials, dist);
      } else {
        time = sortDistTimeTrial(alg, i, trials, dist, params);
      }
      ratio = time/previous;
      System.out.printf("  %12d       %7.0f       %8.3f\n", i, time, ratio);
      previous = time;
    }
  }

  public static void sortDistsDoublingTest(
      String alg, int n, int trials, String dist1, String dist2, double[]...params) {
    // do doubling tests of sort for alg with inital array length n comparing
    // dist1 and dist2
    double previous1 = 0; double previous2 = 0;
    if (params == null || params.length == 0) {
      previous1 = sortDistTimeTrial(alg, n/2, trials, dist1);
      previous2 = sortDistTimeTrial(alg, n/2, trials, dist2);
    } else {
      previous1 = sortDistTimeTrial(alg, n/2, trials, dist1, params[0]);
      previous2 = sortDistTimeTrial(alg, n/2, trials, dist2, params[1]);
    }
    double time1; double time2; double ratio1; double ratio2;
    System.out.println(
        "  Doubling test for "+alg+"sort comparing "+dist1+" vs. "+dist2+" with "+trials+" trials");
    System.out.println("             N       time1       time2        ratio1       ratio2");
    for (int i = n; true; i = 2*i) {
      if (params == null || params.length == 0) {
        time1 = sortDistTimeTrial(alg, i, trials, dist1);
      } else {
        time1 = sortDistTimeTrial(alg, i, trials, dist1, params[0]);
      }
      ratio1 = time1/previous1;
      if (params == null || params.length == 0) {
        time2 = sortDistTimeTrial(alg, i, trials, dist2);
      } else {
        time2 = sortDistTimeTrial(alg, i, trials, dist2, params[1]);
      }
      ratio2 = time2/previous2;
      System.out.printf("  %12d     %7.0f     %7.0f     %8.3f      %8.3f\n", 
          i, time1, time2, ratio1, ratio2);
      previous1 = time1; previous2 = time2;
    }
  }

  public static double sortDistTimeTrial(
      String alg, int n, int trials, String distribution, double...params) {
    // return the average time for sorting a Double array of distribution 
    // with length n by the sort algorithm alg over trials. 
    Consumer<Double[]> con = null;
    switch (alg) {
    case "insertion": con = (Double[] g) -> sort.Insertion.sort(g); break;
    case "selection": con = (Double[] g) -> sort.Selection.sort(g); break;
    case "shell"    : con = (Double[] g) -> sort.Shell.sort(g)    ; break;
    case "default"  : throw new IllegalArgumentException("sort: alg not recognized");
    }
    long[] times = new long[trials];
    Double[] a = null;
    Timer t = new Timer();
    for (int i = 0; i < trials; i++) {
      StdRandom.setSeed(System.currentTimeMillis());
      a = generateDataArray(distribution, n, params);
      t.reset();
      con.accept(a);
      times[i] = t.num();
    }
    return mean(times);
  }

  public static Double[] generateDataArray(String distribution, int n, double...params) {
    Double[] z = null;
    switch (distribution) {
    case "uniform"   : 
      z = getUniformDoubleArray(n);
      break;
    case "gaussian"  : 
      if (params != null && params.length >= 2) {
        z = getGaussianDoubleArray(n, params[0], params[1]);
      } else {
        z = getGaussianDoubleArray(n);
      } 
      break;
    case "poisson"   : 
      if (params != null && params.length >= 1) {
        return getPoissonDoubleArray(n, params[0]);
      } else throw new IllegalArgumentException(
          "generateDataArray: poisson specified but parameter not provided");
    case "geometric" : 
      if (params != null && params.length >= 1) {
        z = getGeometricDoubleArray(n, params[0]);
      } else throw new IllegalArgumentException(
          "generateDataArray: geometric specified but parameter not provided");
      break;
    case "discrete"  : 
      if (params != null && params.length >= 1) {
        z = getDiscreteDoubleArray(n, params);
      } else throw new IllegalArgumentException(
          "generateDataArray: discrete specified but parameter not provided");
      break;
    case "default"   : 
      throw new IllegalArgumentException("generateDataArray: distribution not recognized");
    }
    return z;
  }

  public static Double[] getUniformDoubleArray(int n) {
    Double[] d = new Double[n];
    for (int i = 0; i < n; i++) d[i] = StdRandom.uniform();
    return d;
  }

  public static Double[] getGaussianDoubleArray(int n) {
    Double[] d = new Double[n];
    for (int i = 0; i < n; i++) d[i] = StdRandom.gaussian();
    return d;
  }

  public static Double[] getGaussianDoubleArray(int n, double mu, double sigma) {
    Double[] d = new Double[n];
    for (int i = 0; i < n; i++) d[i] = StdRandom.gaussian(mu, sigma);
    return d;
  }

  public static Double[] getPoissonDoubleArray(int n, double mean) {
    Double[] d = new Double[n];
    for (int i = 0; i < n; i++) d[i] = 1.*StdRandom.poisson(mean);
    return d;
  }

  public static Double[] getGeometricDoubleArray(int n, double success) {
    Double[] d = new Double[n];
    for (int i = 0; i < n; i++) d[i] = 1.*StdRandom.geometric(success);
    return d;
  }

  public static Double[] getDiscreteDoubleArray(int n, double[] probabilities) {
    Double[] d = new Double[n];
    for (int i = 0; i < n; i++) d[i] = 1.*StdRandom.discrete(probabilities);
    return d;
  }

  public static void main(String[] args) {
    
//    sortDistVsNonuniformDoublingTest("shell", 1024, 3, "uniform", 1);
/*
      Doubling test for shellsort comparing uniform vs. nonuniform type 1 with 3 trials
             N       time1       time2        ratio1        ratio2
          1024           2           0        1.000         0.000
          2048           1           0        0.800           NaN
          4096           2           1        1.500      Infinity
          8192           2           0        1.167         0.000
         16384           5           1        2.143      Infinity
         32768          13           3        2.600         3.000
         65536          30           5        2.308         1.667
        131072          86          11        2.878         2.267
        262144         257          25        2.977         2.235
        524288         619          53        2.410         2.105
       1048576        1570         113        2.535         2.119
       2097152        3903         264        2.486         2.336
*/ 
    
//    sortDistVsNonuniformDoublingTest("selection", 1024, 3, "uniform", 1);
/*    
      Doubling test for selectionsort comparing uniform vs. nonuniform type 1 with 3 trials
             N       time1       time2        ratio1        ratio2
          1024          19           2        1.813         0.241
          2048           6          11        0.328         4.714
          4096          28          44        4.368         4.030
          8192          95         137        3.434         3.098
         16384         394         573        4.151         4.172
         32768        1656        2261        4.200         3.946
         65536        7572        9282        4.571         4.105
*/    
       
//    sortDistVsNonuniformDoublingTest("insertion", 1024, 3, "uniform", 1);
/*    
       Doubling test for insertionsort comparing uniform vs. nonuniform type 1 with 3 trials
             N       time1       time2        ratio1        ratio2
          1024           3           0        0.321         0.000
          2048           8           0        2.778           NaN
          4096          35           0        4.160           NaN
          8192         133           0        3.827           NaN
         16384         539           0        4.063           NaN
         32768        2299           1        4.265      Infinity
         65536        9841           1        4.281         0.667
*/   

//    sortDistVsNonuniformDoublingTest("shell", 1024, 3, "uniform", 2);
/*    
      Doubling test for shellsort comparing uniform vs. nonuniform type 2 with 3 trials
             N       time1       time2        ratio1        ratio2
          1024           2           0        1.500         0.500
          2048           1           0        0.500         1.000
          4096           2           0        2.333         1.000
          8192           3           0        1.286         1.000
         16384           6           2        1.889         5.000
         32768          19           4        3.294         2.200
         65536          44           6        2.339         1.545
        131072         115          14        2.634         2.471
        262144         287          30        2.493         2.119
        524288         671          52        2.341         1.742
       1048576        1591         112        2.371         2.168
       2097152        4169         249        2.620         2.226
*/    
    
//    sortDistVsNonuniformDoublingTest("selection", 1024, 3, "uniform", 2);
/*    
        Doubling test for selectionsort comparing uniform vs. nonuniform type 2 with 3 trials
             N       time1       time2        ratio1        ratio2
          1024          21           0        2.032         0.000
          2048           5           5        0.254      Infinity
          4096          26          26        4.875         5.200
          8192          94         120        3.603         4.603
         16384         432         458        4.612         3.825
         32768        1591        1815        3.684         3.966
         65536        6635        7270        4.170         4.005
*/
    
//    sortDistVsNonuniformDoublingTest("insertion", 1024, 3, "uniform", 2);
/*    
        Doubling test for insertionsort comparing uniform vs. nonuniform type 2 with 3 trials
             N       time1       time2        ratio1        ratio2
          1024           5           0        0.340           NaN
          2048          10           0        1.938           NaN
          4096          37           0        3.548           NaN
          8192         171           0        4.673           NaN
         16384         552           0        3.220           NaN
         32768        2418           0        4.384           NaN
         65536        9594           0        3.967           NaN
*/    
    
    double[][] params = new double[2][]; 
    params[0] = new double[0]; params[1] = new double[]{0,26};
//    sortDistVsNonuniformDoublingTest("shell", 1024, 3, "uniform", 3, params);
/*    
      Doubling test for shellsort comparing uniform vs. nonuniform type 3 with 3 trials
             N       time1       time2        ratio1        ratio2
          1024           5           0     Infinity           NaN
          2048           5           0        0.938           NaN
          4096           0           5        0.000      Infinity
          8192           0           5          NaN         0.938
         16384           0           0          NaN         0.000
         32768           5          10     Infinity      Infinity
         65536          26          10        4.938         1.000
        131072          88          26        3.342         2.516
        262144         260          62        2.955         2.397
        524288         639         151        2.459         2.417
       1048576        1633         333        2.554         2.210
       2097152        3900         764        2.389         2.295
*/    
    
//    sortDistVsNonuniformDoublingTest("selection", 1024, 3, "uniform", 3, params);
/*    
        Doubling test for selectionsort comparing uniform vs. nonuniform type 3 with 3 trials
             N       time1       time2        ratio1        ratio2
          1024          21           0        4.200         0.000
          2048          10           5        0.492      Infinity
          4096          26          42        2.516         7.813
          8192         104         135        4.000         3.240
         16384         401         473        3.856         3.504
         32768        1602        1961        3.995         4.145
         65536        6651        8148        4.152         4.156
*/
    
    sortDistVsNonuniformDoublingTest("insertion", 1024, 3, "uniform", 3, params);
/*    
        Doubling test for insertionsort comparing uniform vs. nonuniform type 3 with 3 trials
             N       time1       time2        ratio1        ratio2
          1024           5           0        0.469           NaN
          2048          11           0        2.133           NaN
          4096          31          10        2.938      Infinity
          8192         130          21        4.149         2.032
         16384         530         125        4.079         5.937
         32768        2252         504        4.246         4.045
         65536        9350        2101        4.152         4.166
        131072       50701        8674        5.423         4.128
        262144      385113       43124        7.596         4.972

*/   
    
//    sortNonuniformDoublingTest("shell", 1024, 10, 3, params[1]);
/* 
        Doubling test of shellsort with nonuniform type 3 for 10 trials
             N          time          ratio
          1024             0          0.500
          2048             1          1.500
          4096             1          1.500
          8192             1          1.333
         16384             3          2.833
         32768             6          1.765
         65536            13          2.233
        131072            41          3.022
        262144           131          3.227
        524288           287          2.199
       1048576           653          2.272
       2097152          1466          2.244
       4194304          3317          2.263
*/  
  }

}
