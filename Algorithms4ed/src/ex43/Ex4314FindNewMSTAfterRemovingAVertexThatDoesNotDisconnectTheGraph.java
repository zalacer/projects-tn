package ex43;

import static graph.EdgeWeightedGraphX.fixMstAfterEdgeRemoval;

import graph.EdgeWeightedGraphX;
import graph.EdgeX;

/* p632
  4.3.14 Given an MST for an edge-weighted graph G, suppose that an edge 
  in G that does not disconnect G is deleted. Describe how to find an MST 
  of the new graph in time proportional to E.
  
  If the deleted edge isn't in the MST it remains the MST of the new graph.
  Else the edge was in the MST and deleting it disconnects the MST. Then the
  MST can be fixed by adding to it the edge of least weight that connects its 
  two components. That can be done by iterating over all edges to find the one 
  with minimum weight with a vertex in the first component of the disconnec-
  ted MST and the other in the second component of the disconnected MST. That
  doesn't count identifying the sets of vertices in each component of the dis-
  connected MST which takes time and space proportional to V+E (according to 
  Proposition C on p546), but since the MST is a tree with an edge removed
  removed V = E+2 so overall time is proportional to E.
  
  This algorithm is demonstrated below using using the following 
  enhancements:
  1. updated EdgeX so its fields are int u, int v and double w with getters
     u(), v() and w() (i know it would be proper to capitalize the getters)
  2. added an additional constructor for EdgeWeightedGraphX:
       public EdgeWeightedGraphX(Iterable<EdgeX> edges)
     where edges is expected to be generated by graph.PrimMSTBX.edges()
  3. in EdgeWeightedGraphX added public EdgeX removeEdge(int u, int v) to 
     remove any edge with u and v vertices in this EdgeWeightedGraphX and 
     its parallel GraphX that's used to determine connectivity in the 
     former and has its own removeEdge method
  4. in EdgeWeightedGraphX added public EdgeWeightedGraphX mst() that returns 
     (new PrimMSTBX(this)).mst() that returns new EdgeWeightedGraphX(edges())
  5. in EdgeWeightedGraphX added public static EdgeWeightedGraphX 
      fixMst(EdgeWeightedGraphX ewg, EdgeWeightedGraphX mst, EdgeX edgeRemoved) 
      that fixes and returns ewg's MST after an edge has been removed from both.
  6. hashCode() and equals() methods for BagX, GraphX, EdgeX, EdgeWeightedGraphX
  7. supporting methods for hashCode() and equals namely GraphX.semiSortedAdj()
     and EdgeWeightedGraphX.semiSortedAdj()
  8. a supporting EdgeX comparator for EdgeWeightedGraphX.semiSortedAdj() namely
     EdgeWeightedGraphX.edgCmp
  
 */  

public class Ex4314FindNewMSTAfterRemovingAVertexThatDoesNotDisconnectTheGraph {
  
  public static void main(String[] args) {
    
    // this demonstration uses tinyEWG.txt that's pictured at 
    // http://algs4.cs.princeton.edu/43mst/ for example in the section on the
    // discussions of the lazy and greedy implementations. it shows how the
    // mst changes after edge 0-7 is removed and how the original mst can be
    // fixed without entirely recomputing it
    
    // V and edges from http://algs4.cs.princeton.edu/43mst/tinyEWG.txt
    int V = 8;
    String edges = "4 5 0.35  4 7 0.37  5 7 0.28  0 7 0.16  1 5 0.32 "
       + "0 4 0.38  2 3 0.17  1 7 0.19  0 2 0.26  1 2 0.36  1 3 0.29 "
       + "2 7 0.34  6 2 0.40  3 6 0.52  6 0 0.58  6 4 0.93";
    
    EdgeWeightedGraphX g = new EdgeWeightedGraphX(V,edges);
    System.out.println("\nEdgeWeightedGraphX g:\n"+g);
    
    EdgeWeightedGraphX mstg = g.mst();
    System.out.println("original MST of g:\n"+mstg);
    
    EdgeX removedEdge = g.removeEdge(0,7);
    System.out.println("removed Edge("+removedEdge+") from g");
    
    System.out.println("\ng with Edge("+removedEdge+") removed:\n"+g);
    
    removedEdge = mstg.removeEdge(0,7);
    System.out.println("removed Edge("+removedEdge+") from original MST of g");

    System.out.println("\nMST of g with Edge("+removedEdge+") removed:\n"+mstg);
    
    EdgeWeightedGraphX mstg2 = g.mst();
    System.out.println("new MST of g after Edge("+removedEdge+") removed:");
    System.out.println("(note that Edge(1-3,0.29000) has been added)");
    System.out.println(mstg2);
    
    EdgeWeightedGraphX mstg3 = fixMstAfterEdgeRemoval(g, mstg, removedEdge);
    System.out.println("fixed MST of g after Edge("+removedEdge+") removed from it and its original mst:");
    System.out.println("(note that Edge(1-3,0.29000) has been added)");
    System.out.println(mstg3);
        
    if (mstg2.equals(mstg3)) System.out.println("new MST of g equals it's fixed MST");
    else System.out.println("new MST of g doesn't equal its fixed MST");
  
  }

}


